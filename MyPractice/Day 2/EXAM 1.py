students = [
    {"name": "–ê–Ω—è", "scores": {"math": 5, "history": 4, "biology": 5}},
    {"name": "–ë–æ—Ä–∏—Å", "scores": {"math": 2, "history": 3, "biology": 2}},
    {"name": "–í–∏–∫–∞", "scores": {"math": 4, "history": 5, "biology": 5}},
    {"name": "–ì–ª–µ–±", "scores": {"math": 5, "history": 5, "biology": 5}},
]
print("\n" + "-" * 40 + "\n") 
# üéØ –¢–µ–±–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:

# ‚úÖ –§—É–Ω–∫—Ü–∏—é get_average_scores(students)
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–∏–º—è: —Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª} —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.

def get_average_scores(students: dict) -> dict:
    result = {
        student["name"]: round(sum(student["scores"].values()) / len(student["scores"]), 2)
        for student in students
        }
    return result

average_scores = get_average_scores(students)
print(average_scores)
print("\n" + "-" * 40 + "\n") 
                            # ‚úÖ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ –æ—Ç—á—ë—Ç–∞ ‚Äî print("-" * 40)
                            # ‚úÖ –í—ã–∑–æ–≤–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, 
                            # —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–º—ã—Å–ª—É –æ—Ç—á—ë—Ç–∞.

# ‚úÖ –§—É–Ω–∫—Ü–∏—é get_excellent_students(average_scores)
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —É—á–µ–Ω–∏–∫–æ–≤ —Å —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º ‚â• 4.5

def get_excellent_students(average_scores: dict) -> list:
    result = [
        student_name for student_name, score in average_scores.items()
        if score >= 4.5
        ]
    return result

excellent_students = get_excellent_students(average_scores)
print(excellent_students)
print("\n" + "-" * 40 + "\n") 

# ‚úÖ –§—É–Ω–∫—Ü–∏—é get_failed_subjects(students)
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–∏–º—è: [–Ω–∞–∑–≤–∞–Ω–∏—è_–ø—Ä–µ–¥–º–µ—Ç–æ–≤_–≥–¥–µ_–æ—Ü–µ–Ω–∫–∞<4]}
# (–µ—Å–ª–∏ —É —É—á–µ–Ω–∏–∫–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç)

def get_failed_subjects(students: dict) -> dict:
    result = {
         student["name"]: 
         [subject for subject, score in student["scores"].items() if score < 4] 
         for student in students
         if any(score < 4 for score in student["scores"].values())
         }
    return result

failed_subjects = get_failed_subjects(students)
print(failed_subjects)
print("\n" + "-" * 40 + "\n") 

# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä low_scores(students)
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä—Ç–µ–∂–∏ (–∏–º—è, –ø—Ä–µ–¥–º–µ—Ç, –æ—Ü–µ–Ω–∫–∞) –¥–ª—è –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫ < 4

def low_scores(students):
    for student in students:
        for subject, score in student["scores"].items():
            if score < 4:
                yield(student["name"], subject, score)

for name, subject, score in low_scores(students):
    print(f"{name}: {subject} ‚Äî {score}")
print("\n" + "-" * 40 + "\n") 
